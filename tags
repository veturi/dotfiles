!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/41fa40d/
<C-H>	.vim/.vimrc	/^nnoremap <C-H> <C-W><C-H>$/;"	m
<C-H>	.vim/init.vim	/^nnoremap <C-H> <C-W><C-H>$/;"	m
<C-J>	.vim/.vimrc	/^nnoremap <C-J> <C-W><C-J>$/;"	m
<C-J>	.vim/init.vim	/^nnoremap <C-J> <C-W><C-J>$/;"	m
<C-K>	.vim/.vimrc	/^nnoremap <C-K> <C-W><C-K>$/;"	m
<C-K>	.vim/init.vim	/^nnoremap <C-K> <C-W><C-K>$/;"	m
<C-L>	.vim/.vimrc	/^nnoremap <C-L> <C-W><C-L>$/;"	m
<C-L>	.vim/init.vim	/^nnoremap <C-L> <C-W><C-L>$/;"	m
<F2>	.vim/.vimrc	/^nnoremap <F2> :set nonumber!<CR>$/;"	m
<F2>	.vim/init.vim	/^nnoremap <F2> :set nonumber!<CR>$/;"	m
<F9>	.vim/.vimrc	/^nnoremap <F9> :set list! list?<CR>$/;"	m
<F9>	.vim/init.vim	/^nnoremap <F9> :set list! list?<CR>$/;"	m
<cr>	.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> <cr> :silent! call <SID>preview_commit()<cr>$/;"	m
<leader>P	.vim/.vimrc	/^nmap <leader>P "0P<CR>$/;"	m
<leader>P	.vim/init.vim	/^nmap <leader>P "0P<CR>$/;"	m
<leader>d	.vim/.vimrc	/^nmap <leader>d :b#<bar>bd#<CR>$/;"	m
<leader>d	.vim/init.vim	/^nmap <leader>d :b#<bar>bd#<CR>$/;"	m
<leader>m	.vim/.vimrc	/^nmap <leader>m :MarkedToggle!<CR>$/;"	m
<leader>m	.vim/init.vim	/^nmap <leader>m :MarkedToggle!<CR>$/;"	m
<leader>p	.vim/.vimrc	/^nmap <leader>p "0p<CR>$/;"	m
<leader>p	.vim/init.vim	/^nmap <leader>p "0p<CR>$/;"	m
COMPREPLY=	.git-completion.bash	/^	COMPREPLY=()$/;"	f
COMPREPLY=	.tmux-completion.bash	/^    COMPREPLY=()$/;"	f
D	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
Elixir	.ctags	/^--langdef=Elixir$/;"	l
K	.vim/.vimrc	/^nnoremap K i<CR><ESC>$/;"	m
K	.vim/init.vim	/^nnoremap K i<CR><ESC>$/;"	m
L	.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	.vim/autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
Plug	.vim/autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	.vim/autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	.vim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	.vim/autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	.vim/autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	.vim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
R	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
S	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
SolarizedHiTrail	.vim/colors/solarized.vim	/^augroup SolarizedHiTrail$/;"	a
SolarizedMenu	.vim/colors/solarized.vim	/^function! SolarizedMenu()$/;"	f
SolarizedOptions	.vim/colors/solarized.vim	/^    command SolarizedOptions :call s:SolarizedOptions()$/;"	c
U	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	.vim/autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
X	.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
[[	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
]]	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
__git_aliased_command	.git-completion.bash	/^__git_aliased_command ()$/;"	f
__git_aliases	.git-completion.bash	/^__git_aliases ()$/;"	f
__git_commands	.git-completion.bash	/^__git_commands () {$/;"	f
__git_complete	.git-completion.bash	/^__git_complete ()$/;"	f
__git_complete_file	.git-completion.bash	/^__git_complete_file ()$/;"	f
__git_complete_force_with_lease	.git-completion.bash	/^__git_complete_force_with_lease ()$/;"	f
__git_complete_index_file	.git-completion.bash	/^__git_complete_index_file ()$/;"	f
__git_complete_remote_or_refspec	.git-completion.bash	/^__git_complete_remote_or_refspec ()$/;"	f
__git_complete_revlist	.git-completion.bash	/^__git_complete_revlist ()$/;"	f
__git_complete_revlist_file	.git-completion.bash	/^__git_complete_revlist_file ()$/;"	f
__git_complete_strategy	.git-completion.bash	/^__git_complete_strategy ()$/;"	f
__git_compute_all_commands	.git-completion.bash	/^__git_compute_all_commands ()$/;"	f
__git_compute_merge_strategies	.git-completion.bash	/^__git_compute_merge_strategies ()$/;"	f
__git_compute_porcelain_commands	.git-completion.bash	/^__git_compute_porcelain_commands ()$/;"	f
__git_config_get_set_variables	.git-completion.bash	/^__git_config_get_set_variables ()$/;"	f
__git_count_arguments	.git-completion.bash	/^__git_count_arguments ()$/;"	f
__git_eread	.git-prompt.sh	/^__git_eread ()$/;"	f
__git_find_on_cmdline	.git-completion.bash	/^__git_find_on_cmdline ()$/;"	f
__git_func_wrap	.git-completion.bash	/^__git_func_wrap ()$/;"	f
__git_get_config_variables	.git-completion.bash	/^__git_get_config_variables ()$/;"	f
__git_get_option_value	.git-completion.bash	/^__git_get_option_value ()$/;"	f
__git_has_doubledash	.git-completion.bash	/^__git_has_doubledash ()$/;"	f
__git_heads	.git-completion.bash	/^__git_heads ()$/;"	f
__git_index_files	.git-completion.bash	/^__git_index_files ()$/;"	f
__git_list_all_commands	.git-completion.bash	/^__git_list_all_commands ()$/;"	f
__git_list_merge_strategies	.git-completion.bash	/^__git_list_merge_strategies ()$/;"	f
__git_list_porcelain_commands	.git-completion.bash	/^__git_list_porcelain_commands ()$/;"	f
__git_ls_files_helper	.git-completion.bash	/^__git_ls_files_helper ()$/;"	f
__git_main	.git-completion.bash	/^__git_main ()$/;"	f
__git_match_ctag	.git-completion.bash	/^__git_match_ctag() {$/;"	f
__git_pretty_aliases	.git-completion.bash	/^__git_pretty_aliases ()$/;"	f
__git_ps1	.git-prompt.sh	/^__git_ps1 ()$/;"	f
__git_ps1_colorize_gitstring	.git-prompt.sh	/^__git_ps1_colorize_gitstring ()$/;"	f
__git_ps1_show_upstream	.git-prompt.sh	/^__git_ps1_show_upstream ()$/;"	f
__git_reassemble_comp_words_by_ref	.git-completion.bash	/^__git_reassemble_comp_words_by_ref()$/;"	f
__git_refs	.git-completion.bash	/^__git_refs ()$/;"	f
__git_refs2	.git-completion.bash	/^__git_refs2 ()$/;"	f
__git_refs_remotes	.git-completion.bash	/^__git_refs_remotes ()$/;"	f
__git_remotes	.git-completion.bash	/^__git_remotes ()$/;"	f
__git_tags	.git-completion.bash	/^__git_tags ()$/;"	f
__gitcomp	.git-completion.bash	/^	__gitcomp ()$/;"	f
__gitcomp	.git-completion.bash	/^__gitcomp ()$/;"	f
__gitcomp_file	.git-completion.bash	/^	__gitcomp_file ()$/;"	f
__gitcomp_file	.git-completion.bash	/^__gitcomp_file ()$/;"	f
__gitcomp_nl	.git-completion.bash	/^	__gitcomp_nl ()$/;"	f
__gitcomp_nl	.git-completion.bash	/^__gitcomp_nl ()$/;"	f
__gitcomp_nl_append	.git-completion.bash	/^__gitcomp_nl_append ()$/;"	f
__gitcompadd	.git-completion.bash	/^__gitcompadd ()$/;"	f
__gitcompappend	.git-completion.bash	/^__gitcompappend ()$/;"	f
__gitdir	.git-completion.bash	/^__gitdir ()$/;"	f
__gitk_main	.git-completion.bash	/^__gitk_main ()$/;"	f
_get_comp_words_by_ref	.git-completion.bash	/^_get_comp_words_by_ref ()$/;"	f
_git	.git-completion.bash	/^	_git ()$/;"	f
_git	.git-completion.bash	/^_git ()$/;"	f
_git_add	.git-completion.bash	/^_git_add ()$/;"	f
_git_am	.git-completion.bash	/^_git_am ()$/;"	f
_git_apply	.git-completion.bash	/^_git_apply ()$/;"	f
_git_archive	.git-completion.bash	/^_git_archive ()$/;"	f
_git_bisect	.git-completion.bash	/^_git_bisect ()$/;"	f
_git_branch	.git-completion.bash	/^_git_branch ()$/;"	f
_git_bundle	.git-completion.bash	/^_git_bundle ()$/;"	f
_git_checkout	.git-completion.bash	/^_git_checkout ()$/;"	f
_git_cherry	.git-completion.bash	/^_git_cherry ()$/;"	f
_git_cherry_pick	.git-completion.bash	/^_git_cherry_pick ()$/;"	f
_git_clean	.git-completion.bash	/^_git_clean ()$/;"	f
_git_clone	.git-completion.bash	/^_git_clone ()$/;"	f
_git_commit	.git-completion.bash	/^_git_commit ()$/;"	f
_git_config	.git-completion.bash	/^_git_config ()$/;"	f
_git_describe	.git-completion.bash	/^_git_describe ()$/;"	f
_git_diff	.git-completion.bash	/^_git_diff ()$/;"	f
_git_difftool	.git-completion.bash	/^_git_difftool ()$/;"	f
_git_fetch	.git-completion.bash	/^_git_fetch ()$/;"	f
_git_format_patch	.git-completion.bash	/^_git_format_patch ()$/;"	f
_git_fsck	.git-completion.bash	/^_git_fsck ()$/;"	f
_git_gc	.git-completion.bash	/^_git_gc ()$/;"	f
_git_gitk	.git-completion.bash	/^_git_gitk ()$/;"	f
_git_grep	.git-completion.bash	/^_git_grep ()$/;"	f
_git_help	.git-completion.bash	/^_git_help ()$/;"	f
_git_init	.git-completion.bash	/^_git_init ()$/;"	f
_git_log	.git-completion.bash	/^_git_log ()$/;"	f
_git_ls_files	.git-completion.bash	/^_git_ls_files ()$/;"	f
_git_ls_remote	.git-completion.bash	/^_git_ls_remote ()$/;"	f
_git_ls_tree	.git-completion.bash	/^_git_ls_tree ()$/;"	f
_git_merge	.git-completion.bash	/^_git_merge ()$/;"	f
_git_merge_base	.git-completion.bash	/^_git_merge_base ()$/;"	f
_git_mergetool	.git-completion.bash	/^_git_mergetool ()$/;"	f
_git_mv	.git-completion.bash	/^_git_mv ()$/;"	f
_git_name_rev	.git-completion.bash	/^_git_name_rev ()$/;"	f
_git_notes	.git-completion.bash	/^_git_notes ()$/;"	f
_git_pull	.git-completion.bash	/^_git_pull ()$/;"	f
_git_push	.git-completion.bash	/^_git_push ()$/;"	f
_git_rebase	.git-completion.bash	/^_git_rebase ()$/;"	f
_git_reflog	.git-completion.bash	/^_git_reflog ()$/;"	f
_git_remote	.git-completion.bash	/^_git_remote ()$/;"	f
_git_replace	.git-completion.bash	/^_git_replace ()$/;"	f
_git_reset	.git-completion.bash	/^_git_reset ()$/;"	f
_git_revert	.git-completion.bash	/^_git_revert ()$/;"	f
_git_rm	.git-completion.bash	/^_git_rm ()$/;"	f
_git_send_email	.git-completion.bash	/^_git_send_email ()$/;"	f
_git_shortlog	.git-completion.bash	/^_git_shortlog ()$/;"	f
_git_show	.git-completion.bash	/^_git_show ()$/;"	f
_git_show_branch	.git-completion.bash	/^_git_show_branch ()$/;"	f
_git_stage	.git-completion.bash	/^_git_stage ()$/;"	f
_git_stash	.git-completion.bash	/^_git_stash ()$/;"	f
_git_status	.git-completion.bash	/^_git_status ()$/;"	f
_git_submodule	.git-completion.bash	/^_git_submodule ()$/;"	f
_git_svn	.git-completion.bash	/^_git_svn ()$/;"	f
_git_tag	.git-completion.bash	/^_git_tag ()$/;"	f
_git_whatchanged	.git-completion.bash	/^_git_whatchanged ()$/;"	f
_git_worktree	.git-completion.bash	/^_git_worktree ()$/;"	f
_gitk	.git-completion.bash	/^_gitk ()$/;"	f
_tmux	.tmux-completion.bash	/^_tmux() {$/;"	f
_tmux_complete_client	.tmux-completion.bash	/^function _tmux_complete_client() {$/;"	f
_tmux_complete_session	.tmux-completion.bash	/^function _tmux_complete_session() {$/;"	f
_tmux_complete_window	.tmux-completion.bash	/^function _tmux_complete_window() {$/;"	f
_tmux_expand	.tmux-completion.bash	/^_tmux_expand ()$/;"	f
_tmux_filedir	.tmux-completion.bash	/^_tmux_filedir ()$/;"	f
callbacks,callbacks (defcallback ...)	.ctags	/^--regex-Elixir=\/^[ \\t]*defcallback[ \\t]+([a-z_][a-zA-Z0-9_?!]*)\/\\1\/c,callbacks,callbacks (/;"	k	langdef:Elixir
colors_name	.vim/colors/anderson.vim	/^let colors_name = "anderson"$/;"	v
colors_name	.vim/colors/solarized.vim	/^let colors_name = "solarized"$/;"	v
d	.vim/autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	.vim/autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
dd	.vim/autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
definition	.git-completion.bash	/^		\\(\\))   : skip parens of shell function definition ;;$/;"	f
delegates,delegates (defdelegate ...)	.ctags	/^--regex-Elixir=\/^[ \\t]*defdelegate[ \\t]+([a-z_][a-zA-Z0-9_?!]*)\/\\1\/d,delegates,delegates (/;"	k	langdef:Elixir
exceptions,exceptions (defexception ...)	.ctags	/^--regex-Elixir=\/^[ \\t]*defexception[ \\t]+([A-Z][a-zA-Z0-9_]*\\.)*([A-Z][a-zA-Z0-9_?!]*)\/\\2\//;"	k	langdef:Elixir
filetypedetect	.vim/autoload/plug.vim	/^        augroup filetypedetect$/;"	a
functions,functions (def ...)	.ctags	/^--regex-Elixir=\/^[ \\t]*def(p?)[ \\t]+([a-z_][a-zA-Z0-9_?!]*)\/\\2\/f,functions,functions (def /;"	k	langdef:Elixir
g:_plug_bang	.vim/autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:deoplete#enable_at_startup	.vim/.vimrc	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:deoplete#enable_at_startup	.vim/init.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:elm_setup_keybindings	.vim/.vimrc	/^let g:elm_setup_keybindings = 0$/;"	v
g:elm_setup_keybindings	.vim/init.vim	/^let g:elm_setup_keybindings = 0$/;"	v
g:elm_syntastic_show_warnings	.vim/.vimrc	/^let g:elm_syntastic_show_warnings = 1$/;"	v
g:elm_syntastic_show_warnings	.vim/init.vim	/^let g:elm_syntastic_show_warnings = 1$/;"	v
g:html5_aria_attributes_complete	.vim/.vimrc	/^let g:html5_aria_attributes_complete = 0$/;"	v
g:html5_aria_attributes_complete	.vim/init.vim	/^let g:html5_aria_attributes_complete = 0$/;"	v
g:html5_event_handler_attributes_complete	.vim/.vimrc	/^let g:html5_event_handler_attributes_complete = 0$/;"	v
g:html5_event_handler_attributes_complete	.vim/init.vim	/^let g:html5_event_handler_attributes_complete = 0$/;"	v
g:html5_microdata_attributes_complete	.vim/.vimrc	/^let g:html5_microdata_attributes_complete = 0$/;"	v
g:html5_microdata_attributes_complete	.vim/init.vim	/^let g:html5_microdata_attributes_complete = 0$/;"	v
g:html5_rdfa_attributes_complete	.vim/.vimrc	/^let g:html5_rdfa_attributes_complete = 0$/;"	v
g:html5_rdfa_attributes_complete	.vim/init.vim	/^let g:html5_rdfa_attributes_complete = 0$/;"	v
g:lightline	.vim/.vimrc	/^let g:lightline = {$/;"	v
g:lightline	.vim/init.vim	/^let g:lightline = {$/;"	v
g:loaded_plug	.vim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_solarized_menu	.vim/colors/solarized.vim	/^    let g:loaded_solarized_menu = 1$/;"	v
g:plug_home	.vim/autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	.vim/autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	.vim/autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	.vim/autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	.vim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:syntastic_always_populate_loc_list	.vim/.vimrc	/^let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_always_populate_loc_list	.vim/init.vim	/^let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_auto_loc_list	.vim/.vimrc	/^let g:syntastic_auto_loc_list = 1$/;"	v
g:syntastic_auto_loc_list	.vim/init.vim	/^let g:syntastic_auto_loc_list = 1$/;"	v
g:syntastic_check_on_open	.vim/.vimrc	/^let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_open	.vim/init.vim	/^let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	.vim/.vimrc	/^let g:syntastic_check_on_wq = 0$/;"	v
g:syntastic_check_on_wq	.vim/init.vim	/^let g:syntastic_check_on_wq = 0$/;"	v
g:terminal_background	.vim/colors/anderson.vim	/^  let g:terminal_background =  "#363432"$/;"	v
g:terminal_color_0	.vim/colors/anderson.vim	/^  let g:terminal_color_0 =     "#363432"$/;"	v
g:terminal_color_1	.vim/colors/anderson.vim	/^  let g:terminal_color_1 =     "#be503e"$/;"	v
g:terminal_color_10	.vim/colors/anderson.vim	/^  let g:terminal_color_10 =    "#9ad1bc"$/;"	v
g:terminal_color_11	.vim/colors/anderson.vim	/^  let g:terminal_color_11 =    "#c4c18b"$/;"	v
g:terminal_color_12	.vim/colors/anderson.vim	/^  let g:terminal_color_12 =    "#bad4f5"$/;"	v
g:terminal_color_13	.vim/colors/anderson.vim	/^  let g:terminal_color_13 =    "#e7c6be"$/;"	v
g:terminal_color_14	.vim/colors/anderson.vim	/^  let g:terminal_color_14 =    "#a8c1c5"$/;"	v
g:terminal_color_15	.vim/colors/anderson.vim	/^  let g:terminal_color_15 =    "#e4e4e4"$/;"	v
g:terminal_color_2	.vim/colors/anderson.vim	/^  let g:terminal_color_2 =     "#7bb292"$/;"	v
g:terminal_color_3	.vim/colors/anderson.vim	/^  let g:terminal_color_3 =     "#d7ae38"$/;"	v
g:terminal_color_4	.vim/colors/anderson.vim	/^  let g:terminal_color_4 =     "#628b97"$/;"	v
g:terminal_color_5	.vim/colors/anderson.vim	/^  let g:terminal_color_5 =     "#c7a095"$/;"	v
g:terminal_color_6	.vim/colors/anderson.vim	/^  let g:terminal_color_6 =     "#88a2a4"$/;"	v
g:terminal_color_7	.vim/colors/anderson.vim	/^  let g:terminal_color_7 =     "#c5beba"$/;"	v
g:terminal_color_8	.vim/colors/anderson.vim	/^  let g:terminal_color_8 =     "#645d59"$/;"	v
g:terminal_color_9	.vim/colors/anderson.vim	/^  let g:terminal_color_9 =     "#f0a4af"$/;"	v
g:terminal_foreground	.vim/colors/anderson.vim	/^  let g:terminal_foreground =  "#c5beba"$/;"	v
g:vim_markdown_folding_disabled	.vim/.vimrc	/^let g:vim_markdown_folding_disabled=1$/;"	v
g:vim_markdown_folding_disabled	.vim/init.vim	/^let g:vim_markdown_folding_disabled=1$/;"	v
hs_highlight_boolean	.vim/colors/solarized.vim	/^let hs_highlight_boolean=1$/;"	v
hs_highlight_delimiters	.vim/colors/solarized.vim	/^let hs_highlight_delimiters=1$/;"	v
implementations,implementations (defimpl ...)	.ctags	/^--regex-Elixir=\/^[ \\t]*defimpl[ \\t]+([A-Z][a-zA-Z0-9_]*\\.)*([A-Z][a-zA-Z0-9_?!]*)\/\\2\/i,im/;"	k	langdef:Elixir
macros,macros (defmacro ...)	.ctags	/^--regex-Elixir=\/^[ \\t]*defmacro(p?)[ \\t]+([a-z_][a-zA-Z0-9_?!]*)\\(\/\\2\/a,macros,macros (de/;"	k	langdef:Elixir
modules,modules (defmodule ...)	.ctags	/^--regex-Elixir=\/^[ \\t]*defmodule[ \\t]+([A-Z][a-zA-Z0-9_]*\\.)*([A-Z][a-zA-Z0-9_?!]*)\/\\2\/m,/;"	k	langdef:Elixir
o	.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> o    :silent! call <SID>preview_commit()<cr>$/;"	m
operators,operators (e.g. "defmacro a <<< b")	.ctags	/^--regex-Elixir=\/^[ \\t]*defmacro(p?)[ \\t]+([a-zA-Z0-9_?!]+)?[ \\t]+([^ \\tA-Za-z0-9_]+)[ \\t]*/;"	k	langdef:Elixir
plug#	.vim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	.vim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	.vim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	.vim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	.vim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
protocols,protocols (defprotocol...)	.ctags	/^--regex-Elixir=\/^[ \\t]*defprotocol[ \\t]+([A-Z][a-zA-Z0-9_]*\\.)*([A-Z][a-zA-Z0-9_?!]*)\/\\2\//;"	k	langdef:Elixir
q	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
records,records (defrecord...)	.ctags	/^--regex-Elixir=\/^[ \\t]*Record\\.defrecord[ \\t]+:([a-zA-Z0-9_]+)\/\\1\/r,records,records (defr/;"	k	langdef:Elixir
s:SetOption	.vim/colors/solarized.vim	/^function! s:SetOption(name,default)$/;"	f
s:SolarizedHiTrail	.vim/colors/solarized.vim	/^function! s:SolarizedHiTrail()$/;"	f
s:SolarizedOptions	.vim/colors/solarized.vim	/^function! s:SolarizedOptions()$/;"	f
s:TYPE	.vim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:append_ul	.vim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:ask	.vim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	.vim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assign_name	.vim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	.vim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:b	.vim/colors/solarized.vim	/^    let s:b           = ""$/;"	v
s:b	.vim/colors/solarized.vim	/^    let s:b           = ",bold"$/;"	v
s:back	.vim/colors/solarized.vim	/^        let s:back    = s:base03$/;"	v
s:back	.vim/colors/solarized.vim	/^    let s:back        = "NONE"$/;"	v
s:back	.vim/colors/solarized.vim	/^    let s:back        = s:back$/;"	v
s:back	.vim/colors/solarized.vim	/^    let s:back        = s:base02$/;"	v
s:back	.vim/colors/solarized.vim	/^    let s:back        = s:base03$/;"	v
s:bang	.vim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	.vim/autoload/plug.vim	/^function! s:bar()$/;"	f
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = "#808080"$/;"	v
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = "#839496"$/;"	v
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = "12"$/;"	v
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = "244"$/;"	v
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = "LightBlue"     " 4*$/;"	v
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = s:base1$/;"	v
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = s:temp00$/;"	v
s:base00	.vim/colors/solarized.vim	/^    let s:base00      = "#585858"$/;"	v
s:base00	.vim/colors/solarized.vim	/^    let s:base00      = "#657b83"$/;"	v
s:base00	.vim/colors/solarized.vim	/^    let s:base00      = "11"$/;"	v
s:base00	.vim/colors/solarized.vim	/^    let s:base00      = "240"$/;"	v
s:base00	.vim/colors/solarized.vim	/^    let s:base00      = "LightYellow"   " 3*$/;"	v
s:base00	.vim/colors/solarized.vim	/^    let s:base00      = s:base0$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = "#4e4e4e"$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = "#586e75"$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = "10"$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = "239"$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = "LightGreen"    " 2*$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = s:base00$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = s:base1$/;"	v
s:base02	.vim/colors/solarized.vim	/^    let s:base02      = "#073642"$/;"	v
s:base02	.vim/colors/solarized.vim	/^    let s:base02      = "#262626"$/;"	v
s:base02	.vim/colors/solarized.vim	/^    let s:base02      = "0"$/;"	v
s:base02	.vim/colors/solarized.vim	/^    let s:base02      = "235"$/;"	v
s:base02	.vim/colors/solarized.vim	/^    let s:base02      = "Black"         " 0$/;"	v
s:base02	.vim/colors/solarized.vim	/^    let s:base02      = s:base2$/;"	v
s:base03	.vim/colors/solarized.vim	/^    let s:base03      = "#002b36"$/;"	v
s:base03	.vim/colors/solarized.vim	/^    let s:base03      = "#1c1c1c"$/;"	v
s:base03	.vim/colors/solarized.vim	/^    let s:base03      = "234"$/;"	v
s:base03	.vim/colors/solarized.vim	/^    let s:base03      = "8"$/;"	v
s:base03	.vim/colors/solarized.vim	/^    let s:base03      = "DarkGray"      " 0*$/;"	v
s:base03	.vim/colors/solarized.vim	/^    let s:base03      = s:base3$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = "#8a8a8a"$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = "#93a1a1"$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = "14"$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = "245"$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = "LightCyan"     " 6*$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = s:base2$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = s:temp01$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = "#d7d7af"$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = "#eee8d5"$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = "187"$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = "7"$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = "LightGray"     " 7$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = s:base3$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = s:temp02$/;"	v
s:base3	.vim/colors/solarized.vim	/^    let s:base3       = "#fdf6e3"$/;"	v
s:base3	.vim/colors/solarized.vim	/^    let s:base3       = "#ffffd7"$/;"	v
s:base3	.vim/colors/solarized.vim	/^    let s:base3       = "15"$/;"	v
s:base3	.vim/colors/solarized.vim	/^    let s:base3       = "230"$/;"	v
s:base3	.vim/colors/solarized.vim	/^    let s:base3       = "White"         " 7*$/;"	v
s:base3	.vim/colors/solarized.vim	/^    let s:base3       = s:temp03$/;"	v
s:base_spec	.vim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:bb	.vim/colors/solarized.vim	/^    let s:bb          = ""$/;"	v
s:bb	.vim/colors/solarized.vim	/^    let s:bb          = ",bold"$/;"	v
s:blue	.vim/colors/solarized.vim	/^    let s:blue        = "#0087ff"$/;"	v
s:blue	.vim/colors/solarized.vim	/^    let s:blue        = "#268bd2"$/;"	v
s:blue	.vim/colors/solarized.vim	/^    let s:blue        = "33"$/;"	v
s:blue	.vim/colors/solarized.vim	/^    let s:blue        = "4"$/;"	v
s:blue	.vim/colors/solarized.vim	/^    let s:blue        = "DarkBlue"      " 4$/;"	v
s:bright	.vim/colors/solarized.vim	/^    let s:bright      = "* term=bold cterm=bold"$/;"	v
s:c	.vim/colors/solarized.vim	/^    let s:c               = ",undercurl"$/;"	v
s:check_ruby	.vim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:checkout	.vim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chsh	.vim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:clean	.vim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:colorscheme_list	.vim/colors/solarized.vim	/^let s:colorscheme_list=[$/;"	v
s:compare_git_uri	.vim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:cpo_save	.vim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cyan	.vim/colors/solarized.vim	/^    let s:cyan        = "#00afaf"$/;"	v
s:cyan	.vim/colors/solarized.vim	/^    let s:cyan        = "#2aa198"$/;"	v
s:cyan	.vim/colors/solarized.vim	/^    let s:cyan        = "37"$/;"	v
s:cyan	.vim/colors/solarized.vim	/^    let s:cyan        = "6"$/;"	v
s:cyan	.vim/colors/solarized.vim	/^    let s:cyan        = "DarkCyan"      " 6$/;"	v
s:defaults_list	.vim/colors/solarized.vim	/^let s:defaults_list=[$/;"	v
s:define_commands	.vim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:delete	.vim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:delete_op	.vim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:diff	.vim/autoload/plug.vim	/^function! s:diff()$/;"	f
s:dirpath	.vim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:do	.vim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:doautocmd	.vim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	.vim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:err	.vim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:esc	.vim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escrtp	.vim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:extract_name	.vim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:fg_pdef	.vim/colors/solarized.vim	/^let s:fg_pdef = s:fg_violet$/;"	v
s:fg_phead	.vim/colors/solarized.vim	/^let s:fg_phead = s:fg_orange$/;"	v
s:fg_ptable	.vim/colors/solarized.vim	/^let s:fg_ptable = s:fg_blue$/;"	v
s:find_name	.vim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:finish	.vim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	.vim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:first_rtp	.vim/autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:format_git_log	.vim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_message	.vim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:git_validate	.vim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	.vim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:glob	.vim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	.vim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:green	.vim/colors/solarized.vim	/^    let s:green       = "#5f8700"$/;"	v
s:green	.vim/colors/solarized.vim	/^    let s:green       = "#719e07" "experimental$/;"	v
s:green	.vim/colors/solarized.vim	/^    let s:green       = "2"$/;"	v
s:green	.vim/colors/solarized.vim	/^    let s:green       = "64"$/;"	v
s:green	.vim/colors/solarized.vim	/^    let s:green       = "DarkGreen"     " 2$/;"	v
s:hash_match	.vim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:i	.vim/colors/solarized.vim	/^    let s:i           = ""$/;"	v
s:i	.vim/colors/solarized.vim	/^    let s:i           = ",italic"$/;"	v
s:infer_properties	.vim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:install	.vim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:is_local_plug	.vim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_managed	.vim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_preview_window_open	.vim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_updated	.vim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_win	.vim/autoload/plug.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:job_abort	.vim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_cb	.vim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_exit_cb	.vim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_out_cb	.vim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:last_non_empty_line	.vim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:last_rtp	.vim/autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:lastline	.vim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lazycat_list	.vim/colors/solarized.vim	/^let s:lazycat_list=[$/;"	v
s:lines	.vim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:load_plugin	.vim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:loaded	.vim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded_names	.vim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:lod	.vim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	.vim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	.vim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	.vim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	.vim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log4	.vim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logpos	.vim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	.vim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:mac_gui	.vim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:magenta	.vim/colors/solarized.vim	/^    let s:magenta     = "#af005f"$/;"	v
s:magenta	.vim/colors/solarized.vim	/^    let s:magenta     = "#d33682"$/;"	v
s:magenta	.vim/colors/solarized.vim	/^    let s:magenta     = "125"$/;"	v
s:magenta	.vim/colors/solarized.vim	/^    let s:magenta     = "5"$/;"	v
s:magenta	.vim/colors/solarized.vim	/^    let s:magenta     = "DarkMagenta"   " 5$/;"	v
s:me	.vim/autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:n	.vim/colors/solarized.vim	/^    let s:n               = "NONE"$/;"	v
s:names	.vim/autoload/plug.vim	/^function! s:names(...)$/;"	f
s:new_window	.vim/autoload/plug.vim	/^function! s:new_window()$/;"	f
s:none	.vim/colors/solarized.vim	/^    let s:none            = "NONE"$/;"	v
s:nvim	.vim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim_cb	.vim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:ob	.vim/colors/solarized.vim	/^    let s:ob              = ""$/;"	v
s:options_list	.vim/colors/solarized.vim	/^let s:options_list=[$/;"	v
s:orange	.vim/colors/solarized.vim	/^    let s:orange      = "#cb4b16"$/;"	v
s:orange	.vim/colors/solarized.vim	/^    let s:orange      = "#d75f00"$/;"	v
s:orange	.vim/colors/solarized.vim	/^    let s:orange      = "166"$/;"	v
s:orange	.vim/colors/solarized.vim	/^    let s:orange      = "9"$/;"	v
s:orange	.vim/colors/solarized.vim	/^    let s:orange      = "LightRed"      " 1*$/;"	v
s:ou	.vim/colors/solarized.vim	/^    let s:ou              = ""$/;"	v
s:ou	.vim/colors/solarized.vim	/^    let s:ou          = ",underline"$/;"	v
s:parse_options	.vim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:path	.vim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:plug_buf	.vim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	.vim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	.vim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_window_exists	.vim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:prepare	.vim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:preview_commit	.vim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:progress_bar	.vim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	.vim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:r	.vim/colors/solarized.vim	/^    let s:r               = ",reverse"$/;"	v
s:reap	.vim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:red	.vim/colors/solarized.vim	/^    let s:red         = "#af0000"$/;"	v
s:red	.vim/colors/solarized.vim	/^    let s:red         = "#dc322f"$/;"	v
s:red	.vim/colors/solarized.vim	/^    let s:red         = "1"$/;"	v
s:red	.vim/colors/solarized.vim	/^    let s:red         = "124"$/;"	v
s:red	.vim/colors/solarized.vim	/^    let s:red         = "DarkRed"       " 1$/;"	v
s:regress_bar	.vim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reload_plugins	.vim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:remove_rtp	.vim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	.vim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:reorg_rtp	.vim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:retry	.vim/autoload/plug.vim	/^function! s:retry()$/;"	f
s:revert	.vim/autoload/plug.vim	/^function! s:revert()$/;"	f
s:rm_rf	.vim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rtp	.vim/autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
s:s	.vim/colors/solarized.vim	/^    let s:s               = ",standout"$/;"	v
s:section	.vim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:shellesc	.vim/autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
s:shellesc_cmd	.vim/autoload/plug.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:snapshot	.vim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:solarized_termtrans_default	.vim/colors/solarized.vim	/^    let s:solarized_termtrans_default = 0$/;"	v
s:solarized_termtrans_default	.vim/colors/solarized.vim	/^    let s:solarized_termtrans_default = 1$/;"	v
s:source	.vim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:sp_back	.vim/colors/solarized.vim	/^    let s:sp_back      = ""$/;"	v
s:sp_base0	.vim/colors/solarized.vim	/^    let s:sp_base0     = ""$/;"	v
s:sp_base00	.vim/colors/solarized.vim	/^    let s:sp_base00    = ""$/;"	v
s:sp_base01	.vim/colors/solarized.vim	/^    let s:sp_base01    = ""$/;"	v
s:sp_base02	.vim/colors/solarized.vim	/^    let s:sp_base02    = ""$/;"	v
s:sp_base03	.vim/colors/solarized.vim	/^    let s:sp_base03    = ""$/;"	v
s:sp_base1	.vim/colors/solarized.vim	/^    let s:sp_base1     = ""$/;"	v
s:sp_base2	.vim/colors/solarized.vim	/^    let s:sp_base2     = ""$/;"	v
s:sp_base3	.vim/colors/solarized.vim	/^    let s:sp_base3     = ""$/;"	v
s:sp_blue	.vim/colors/solarized.vim	/^    let s:sp_blue      = ""$/;"	v
s:sp_cyan	.vim/colors/solarized.vim	/^    let s:sp_cyan      = ""$/;"	v
s:sp_green	.vim/colors/solarized.vim	/^    let s:sp_green     = ""$/;"	v
s:sp_magenta	.vim/colors/solarized.vim	/^    let s:sp_magenta   = ""$/;"	v
s:sp_none	.vim/colors/solarized.vim	/^    let s:sp_none      = ""$/;"	v
s:sp_orange	.vim/colors/solarized.vim	/^    let s:sp_orange    = ""$/;"	v
s:sp_red	.vim/colors/solarized.vim	/^    let s:sp_red       = ""$/;"	v
s:sp_violet	.vim/colors/solarized.vim	/^    let s:sp_violet    = ""$/;"	v
s:sp_yellow	.vim/colors/solarized.vim	/^    let s:sp_yellow    = ""$/;"	v
s:spawn	.vim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:split_rtp	.vim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:status	.vim/autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	.vim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	.vim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:switch_in	.vim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	.vim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:syntax	.vim/autoload/plug.vim	/^function! s:syntax()$/;"	f
s:system	.vim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system_chomp	.vim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:t_none	.vim/colors/solarized.vim	/^    let s:t_none          = "NONE"$/;"	v
s:temp00	.vim/colors/solarized.vim	/^    let s:temp00      = s:base00$/;"	v
s:temp01	.vim/colors/solarized.vim	/^    let s:temp01      = s:base01$/;"	v
s:temp02	.vim/colors/solarized.vim	/^    let s:temp02      = s:base02$/;"	v
s:temp03	.vim/colors/solarized.vim	/^    let s:temp03      = s:base03$/;"	v
s:terminal_italic	.vim/colors/solarized.vim	/^            let s:terminal_italic=1$/;"	v
s:terminal_italic	.vim/colors/solarized.vim	/^    let s:terminal_italic=0 " terminals will be guilty until proven compatible$/;"	v
s:terminal_italic	.vim/colors/solarized.vim	/^    let s:terminal_italic=1 " TODO: could refactor to not require this at all$/;"	v
s:terms_italic	.vim/colors/solarized.vim	/^let s:terms_italic=[$/;"	v
s:terms_noitalic	.vim/colors/solarized.vim	/^let s:terms_noitalic=[$/;"	v
s:tick	.vim/autoload/plug.vim	/^function! s:tick()$/;"	f
s:to_a	.vim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_s	.vim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:triggers	.vim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	.vim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:u	.vim/colors/solarized.vim	/^    let s:u           = ""$/;"	v
s:u	.vim/colors/solarized.vim	/^    let s:u           = ",underline"$/;"	v
s:update	.vim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update_finish	.vim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_impl	.vim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_python	.vim/autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_ruby	.vim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_vim	.vim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:upgrade	.vim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	.vim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:version_requirement	.vim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:vim8	.vim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:violet	.vim/colors/solarized.vim	/^    let s:violet      = "#5f5faf"$/;"	v
s:violet	.vim/colors/solarized.vim	/^    let s:violet      = "#6c71c4"$/;"	v
s:violet	.vim/colors/solarized.vim	/^    let s:violet      = "13"$/;"	v
s:violet	.vim/colors/solarized.vim	/^    let s:violet      = "61"$/;"	v
s:violet	.vim/colors/solarized.vim	/^    let s:violet      = "LightMagenta"  " 5*$/;"	v
s:vmode	.vim/colors/solarized.vim	/^    let s:vmode       = "cterm"$/;"	v
s:vmode	.vim/colors/solarized.vim	/^    let s:vmode       = "gui"$/;"	v
s:warn	.vim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:with_cd	.vim/autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
s:yellow	.vim/colors/solarized.vim	/^    let s:yellow      = "#af8700"$/;"	v
s:yellow	.vim/colors/solarized.vim	/^    let s:yellow      = "#b58900"$/;"	v
s:yellow	.vim/colors/solarized.vim	/^    let s:yellow      = "136"$/;"	v
s:yellow	.vim/colors/solarized.vim	/^    let s:yellow      = "3"$/;"	v
s:yellow	.vim/colors/solarized.vim	/^    let s:yellow      = "DarkYellow"    " 3$/;"	v
svn_remote=	.git-prompt.sh	/^	svn_remote=()$/;"	f
tests,tests (test ...)	.ctags	/^--regex-Elixir=\/^[ \\t]*test[ \\t]+\\"([a-z_][a-zA-Z0-9_?! ]*)\\"*\/\\1\/t,tests,tests (test ../;"	k	langdef:Elixir
w!!	.vim/.vimrc	/^cmap w!! w !sudo tee % >\/dev\/null$/;"	m
w!!	.vim/init.vim	/^cmap w!! w !sudo tee % >\/dev\/null$/;"	m
